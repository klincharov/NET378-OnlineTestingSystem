package Server;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;



public class Server extends JFrame{

//   private JTextField userText;                 // TODO change to label with information
   private final JTextArea chatWindow;
   private ObjectOutputStream output;
   private ObjectInputStream input;
   private ServerSocket server;
   private Socket connection;

   
   //constructor
   public Server(){
    
   
//    userText = new JTextField();
//    userText.setEditable(false); //not able to type UNTIL connected
//    userText.addActionListener(
//        new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent event){                     // ????
//            //sendMessage(event.getActionCommand());
//            userText.setText("");}
//            }
//    );
        setTitle("Testing Server");
        //add(userText, BorderLayout.NORTH);
        chatWindow =  new JTextArea();
        add(new JScrollPane(chatWindow));
        setSize(300, 300);
        setResizable(false);
        setVisible(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        chatWindow.setEditable(false);
        chatWindow.setOpaque(false);
       
       
   }
   //setup and run the server
   public void startRunning() throws JDOMException{
    try{                            
        server = new ServerSocket(8080, 100); // 100 people allowed to wait on port 8080 (backlog, queue length)
        while(true){ //runs forever
            try{ //ORDER IS IMPORTANT!!!!
                waitForConnection(); //to be built      
                setupStreams(); //to set input output streams
                
                
                                
                sendArrays();                                                    // readXML inside
                
                
                whileRunning(); //continuously send back and forth messages 
                
                
            }catch(EOFException eofException){ //End_Of_File, in our case End Of Stream
            displayMessage("\nServer ended the connection!"); //the other user leaves
            }finally{
                //closeCrap();                                                  //clear everything TODO CHECK WHY NOT WORKING!
        } 
     }
    }catch (IOException ioException){
    ioException.printStackTrace();
    }
   }
   
    //wait for connection. then display connection info
    private void waitForConnection() throws IOException, JDOMException{
        displayMessage("Reading XML...");
        displayMessage("\nQuestions found: " + readXML("questions").length);    //TODO UNUSED ARRAY ?
        displayMessage("\nWaiting for connection...");
        connection = server.accept();                                           //accept pending requests
        displayMessage("\nNow connected to " + connection.getInetAddress().getHostName());

    }
    //get stream to send and receive data
    private void setupStreams() throws IOException{
        output = new ObjectOutputStream(connection.getOutputStream());
        output.flush();                                                         //clear leftover data
        input = new ObjectInputStream(connection.getInputStream());
        //only the other side can flush 
        displayMessage("\nStreams connected!");
    }
    
    //during the connection
    private void whileRunning() throws IOException{                             //TODO rework for online test/multithreading
        String message;

        do{
            try{
                message = (String) input.readObject(); 
                displayMessage("\n" + message);
            }catch(ClassNotFoundException classNotFoundException){
                displayMessage("\n idk wtf that user send!");                   //corrupted input ?
            }catch(IOException ioex){
            }
        }while(true);                                                           //TODO fix escape sequence
    } 
    
    //close streams and sockets
    private void closeCrap() throws IOException{
        displayMessage("\nClosing connections... \n");
        //ableToType(false); //no longer able to type without a partner
        try{
            input.close();
            output.close();
            connection.close(); //close the whole socket
        }catch(IOException ioException){
            displayMessage("Connection reset");
        }  
    }

    
    private void sendArrays() throws JDOMException{                                   //TODO send array
        try{
            
            output.writeObject(readXML("questions"));                          //push the object into output stream
            output.writeObject(readXML("answers"));
            output.writeObject(readXML("corrects"));
            
            output.flush();                                                     //house keeping

            displayMessage("\nArrays sent!");

            System.out.println(Integer.toString(readXML("questions").length));  //testing TODO REMOVE
            System.out.println(Integer.toString(readXML("answers").length));
            System.out.println(Integer.toString(readXML("corrects").length));

            
        }catch(IOException ioException){
            chatWindow.append("\n ERROR. COULD NOT BE SEND");
        }
    }
    
    
    
    private void displayMessage(final String text) throws IOException{           
       SwingUtilities.invokeLater(
            new Runnable(){ // new thread
                @Override
                public void run(){
                    chatWindow.append(text); //updates the chat window text are with new message
                }
            }
        );
        
    }

    
    
    private String[] readXML(String name) throws JDOMException, IOException{
            
        
        try {
        Document doc = new SAXBuilder().build("exam.xml");
        
        Element root = doc.getRootElement(); // shortcut for the root element
         
        List<Element> questionList = root.getChildren();
        //final int qCount = questionList.size();                                // ofsetting the questions 
        
        
        String[] questions = new String[questionList.size()];
        String[] answers = new String[questionList.size() * 4];
        String[] corrects = new String[questionList.size()];

        
//        System.out.println("ROOT: " + root.getName());                          // testing if everything is OK
//        System.out.println("Right answers: " + abcdAnswers.length);             
                
        for(int temp = 0; temp < questionList.size(); temp++){                  // everything in readXML method ????
            
            Element question = questionList.get(temp);                        
            questions[temp] = questionList.get(temp).getText().trim();          // put questions in array and remove tabulations and new lines; old one .replace("\t\n", "")
            
            //questionList.subList(temp, temp);                                 // TO SPLIT INTO GROUPS OF 4 ???
            
            for(int i = 0; i < 4; i++){            
                
                answers[temp * 4 + i] = questionList.get(temp).getChildren("answer").get(i).getText();
            }
            
            String correct = question.getChild("correct").getText();            // gets the correct answers in the form of 0 1 2 3 strings
                        
            corrects[temp] = correct;
            //System.out.println(questions[temp]);            // test printing questions FIX TABULATIONS !!!
        }  
        
        for (String corr : corrects) {
            //System.out.print(corr + " ");
            }
        for (String answer : answers) {            
            //System.out.println(answer);
        }
        //System.out.println("Questions: " + questions.length + " answers: " + answers.length + " correct : " + corrAnswers.length);
        
        switch (name) {
            case "questions": return questions;
            case "answers": return answers;
            case "corrects": return corrects;
                
        }
        
        }catch (JDOMException | IOException ex){
            displayMessage("XML error or missing file!\n" + ex.getMessage());
        }
        return null;
    }

}

    

